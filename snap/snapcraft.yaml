name: azure-iot-edge-ijohnson
version: '1.0.6.1'
summary: Extend cloud intelligence and analytics to edge devices 
description: 
  Azure IoT Edge is a fully managed service that delivers cloud intelligence 
  locally by deploying and running artificial intelligence (AI), Azure 
  services, and custom logic directly on cross-platform IoT devices. Run your 
  IoT solution securely and at scaleâ€”whether in the cloud or offline.


architectures:
  - build-on: armhf
    run-on: armhf
  # - build-on: arm64
  #   run-on: arm64
  - build-on: amd64
    run-on: amd64

grade: stable
confinement: strict

passthrough:
  layout:
    /etc/docker:
      bind: $SNAP_DATA/etc/docker

# plugs:
#   home:
#     read: all

apps:
  iotedge:
    command: usr/bin/iotedge
    environment:
      IOTEDGE_HOST: unix://$SNAP_COMMON/run/mgmt.sock
    plugs:
      - network
      - network-bind
  iotedged:
    command: usr/bin/iotedged -c $SNAP_COMMON/etc/iotedge/config.yaml
    daemon: simple
    passthrough:
      after: [dockerd]
    plugs:
      - network
      - network-bind
    sockets:
      workload:
        listen-stream: $SNAP_COMMON/run/workload.sock
        socket-mode: 0666
      mgmt:
        listen-stream: $SNAP_COMMON/run/mgmt.sock
        socket-mode: 0666
  docker:
    command: docker
    environment:
      GIT_TEMPLATE_DIR: $SNAP/share/git-core/templates
      GIT_CONFIG_NOSYSTEM: "true"
      GIT_EXEC_PATH: $SNAP/libexec/git-core
      GIT_TEXTDOMAINDIR: $SNAP/usr/share/locale
      DOCKER_HOST: unix://$SNAP_COMMON/run/docker.sock
    completer: bin/docker-completion.sh
    plugs:
      - network
      - home
  dockerd:
    command: dockerd-wrapper
    daemon: simple
    plugs:
      - network-bind
      - firewall-control
      - docker-support
      - home
    sockets:
      docker-socket:
        listen-stream: $SNAP_COMMON/run/docker.sock

parts:
  iotedge:
    plugin: dump
    source: 
      - on amd64: https://github.com/Azure/azure-iotedge/releases/download/1.0.6.1/iotedge_1.0.6.1-1_amd64.deb
      - on armhf: https://github.com/Azure/azure-iotedge/releases/download/1.0.6.1/iotedge_1.0.6.1-1_armhf.deb
      # - on arm64: https://github.com/Azure/azure-iotedge/releases/download/1.0.6.1/iotedge_1.0.6.1-1_amd64.deb
    stage-packages:
      - libgcc1
  libiothsm:
    plugin: dump
    source: 
      - on amd64: https://github.com/Azure/azure-iotedge/releases/download/1.0.6.1/libiothsm-std_1.0.6.1-1_amd64.deb
      - on armhf: https://github.com/Azure/azure-iotedge/releases/download/1.0.6.1/libiothsm-std_1.0.6.1-1_armhf.deb
      # - on arm64: https://github.com/Azure/azure-iotedge/releases/download/1.0.6.1/iotedge_1.0.6.1-1_amd64.deb
  wrapper-scripts:
    plugin: dump
    source: local-assets
    stage-packages:
      - mount
    stage:
      - bin/*
      - patches/*
      - config/daemon.json
    prime:
      - -bin/prep-docker-build.sh
      - -bin/go-build-helper.sh
      - -patches/*
      - bin/*
      - config/daemon.json
  dl-go:
    source: 
      # note there's some discrepency in the name of the powerpc 64-bit arch...
      # ubuntu calls it ppc64le, but go calls it ppc64el
      - on amd64:   ./amd64
      # - on arm64:   ./arm64
      - on armhf:   ./armhf
    plugin: nil
    build-packages: [curl, coreutils]
    override-build: |
      # check to see if the link and sha256 files exist
      # currently if the host architecture isn't supported in the above source: grammar expression
      # then the source is just set to "source: .", so we can check if that's the case by looking
      # for link + sha256 files
      if [ ! -f link ] || [ ! -f sha256 ]; then
        # we're building on an unknown architecture
        # TODO: try to build go natively here in case the go toolchain gets ported to another
        # architecture before this repo gets updated
        echo "Unsupported architecture: $(uname -m)"
        exit 1
      fi
      # download the archive, failing on ssl cert problems
      curl $(cat link) -O
      sha256sum -c sha256 | grep OK

      case $? in
      0)
        tar -C $SNAPCRAFT_STAGE -xf go*.tar.gz --strip-components=1;;
      *)
        echo "invalid sha256, failing..."
        exit 1;;
      esac
    after: 
      - wrapper-scripts
  docker:
    plugin: make
    source: https://github.com/docker/docker-ce.git
    source-tag: v18.06.1-ce
    source-depth: 1
    override-build: |
      # docker build specific environment variables
      export VERSION=$(cat VERSION)
      export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
      export GITCOMMIT=$DOCKER_GITCOMMIT
      export DISABLE_WARN_OUTSIDE_CONTAINER=1

      # this patches the docker sources
      . "$SNAPCRAFT_STAGE/bin/prep-docker-build.sh"

      # setup the go build environment for docker-ce
      . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/docker/docker-ce

      # build the dockerd binary
      cd components/engine
      ./hack/make.sh dynbinary
      cd $GOIMPORTPATH

      unset LDFLAGS
      ln -s "$(pwd)/components/cli" $GOPATH/src/github.com/docker/cli
      make -C $GOPATH/src/github.com/docker/cli dynbinary

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T "$GOPATH/src/github.com/docker/cli/build/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker"
      install -T "$GOPATH/src/github.com/docker/docker-ce/components/engine/bundles/latest/dynbinary-daemon/dockerd" "$SNAPCRAFT_PART_INSTALL/bin/dockerd"
      install -T "$GOPATH/src/github.com/docker/docker-ce/components/cli/contrib/completion/bash/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker-completion.sh"
    after:
      - dl-go
      - wrapper-scripts
    build-packages:
      - btrfs-tools
      - gcc
      - libc6-dev
      - libdevmapper-dev
      - libltdl-dev
      - patch
      - git
      - pkg-config
    stage-packages:
      - zfsutils-linux
      - aufs-tools
      - libltdl7
  # this part is so that things like `docker build -t foobar github.com/foo/bar` work
  git:
    source: https://github.com/git/git
    source-type: git
    source-tag: v2.19.0
    source-depth: 1
    plugin: autotools
    configflags:
      - --with-curl
      - --with-expat
    build-packages:
        - gettext
        - libssl-dev
        - libexpat1-dev
    stage-packages:
        - gettext
        - libcurl3
        - libcurl4-openssl-dev

  containerd:
    plugin: make
    source: https://github.com/containerd/containerd.git
    # from : https://github.com/docker/docker-ce/blob/v18.06.1-ce/components/engine/hack/dockerfile/install/containerd.installer
    source-commit: 468a545b9edcd5932818eb9de8e72413e616e86e
    override-build: |
      # setup the go build environment for containerd
      . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/containerd/containerd

      make GIT_COMMIT= GIT_BRANCH= LDFLAGS=

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T bin/containerd "$SNAPCRAFT_PART_INSTALL/bin/docker-containerd"
      install -T bin/containerd-shim "$SNAPCRAFT_PART_INSTALL/bin/docker-containerd-shim"
      install -T bin/ctr "$SNAPCRAFT_PART_INSTALL/bin/docker-containerd-ctr"
    after:
      - dl-go
    build-packages:
      - make

  runc:
    plugin: make
    source: https://github.com/opencontainers/runc.git
    # from https://github.com/docker/docker-ce/blob/v18.06.1-ce/components/engine/hack/dockerfile/install/runc.installer
    source-commit: 69663f0bd4b60df09991c08812a60108003fa340
    override-build: |
      # setup the go build environment for runc
      . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/opencontainers/runc

      make BUILDTAGS='seccomp apparmor selinux' COMMIT=

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T runc "$SNAPCRAFT_PART_INSTALL/bin/docker-runc"
    after:
      - dl-go
    build-packages:
      - libapparmor-dev
      - libseccomp-dev
      - make

  libnetwork:
    plugin: make
    source: https://github.com/docker/libnetwork.git
    # from https://github.com/docker/docker-ce/blob/v18.06.1-ce/components/engine/hack/dockerfile/install/proxy.installer
    source-commit: 3ac297bc7fd0afec9051bbb47024c9bc1d75bf5b
    override-build: |
      # setup the go build environment for libnetwork
      . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/docker/libnetwork

      make build-local

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T bin/docker-proxy "$SNAPCRAFT_PART_INSTALL/bin/docker-proxy"
      install -T bin/dnet "$SNAPCRAFT_PART_INSTALL/bin/dnet"
    after:
      - dl-go
    build-packages:
      - iptables
      - make

  tini:
    plugin: cmake
    source: https://github.com/krallin/tini.git
    source-type: git
    # from https://github.com/docker/docker-ce/blob/v18.05.0-ce/components/engine/hack/dockerfile/install/tini.installer
    source-commit: 949e6facb77383876aeff8a6944dde66b3089574
    organize:
      'bin/tini-static': bin/docker-init
    build-packages:
      - build-essential
    prime:
      - -bin/tini
